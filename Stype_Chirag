global registers
registers = { "00000" : 0 ,
              "00001" : 0  ,
              "00010" : 0 ,
              "00011" : 0  , 
              "00100" : 0  ,
              "00101" : 0  ,
              "00110" : 0  ,
              "00111" : 0  ,
              "01000" : 0  ,  
              "01001" : 0  ,
              "01010" : 0  , 
              "01011" : 0  , 
              "01100" : 0 , 
              "01101" : 0  , 
              "01110" : 0  ,
              "01111" : 0 , 
              "10000" : 0 , 
              "10001" : 0  , 
              "10010" : 0  , 
              "10011" : 0  , 
              "10100" : 0  , 
              "10101" : 0 , 
              "10110" : 0 , 
              "10111" : 0  , 
              "11000" : 0  , 
              "11001" : 0  , 
              "11010" : 0 , 
              "11011" : 0  , 
              "11100" : 0 , 
              "11101" : 0 , 
              "11110" : 0  , 
              "11111" : 0}
global stack
stack = []

global memory
memory = {"0x00010000" : 0,
          "0x00010004" : 0,
          "0x00010008" : 0, 
          "0x0001000c" : 0,
          "0x00010010" : 0,
          "0x00010014" : 0,
          "0x00010018" : 0, 
          "0x0001001c" : 0,
          "0x00010020" : 0,
          "0x00010024" : 0,
          "0x00010028" : 0, 
          "0x0001002c" : 0,
          "0x00010030" : 0,
          "0x00010034" : 0,
          "0x00010038" : 0, 
          "0x0001003c" : 0,
          "0x00010040" : 0,
          "0x00010044" : 0,
          "0x00010048" : 0, 
          "0x0001004c" : 0,
          "0x00010050" : 0,
          "0x00010054" : 0,
          "0x00010058" : 0, 
          "0x0001005c" : 0,
          "0x00010060" : 0,
          "0x00010064" : 0,
          "0x00010068" : 0, 
          "0x0001006c" : 0,
          "0x00010070" : 0,
          "0x00010074" : 0,
          "0x00010078" : 0, 
          "0x0001007c" : 0 }

global program_counter
program_counter= 0
global stop
stop = 0
def DtoH(decimal):
    hex=''
    rem={0:'0',1:'1',2:'2',3:'3',4:'4',5:'5',6:'6',7:'7',8:'8',9:'9',10:'A',11:'B',12:'C',13:'D',14:'E',15:'F'}
    while(decimal>0):
        hex+=rem[decimal%16]
        print(hex)
        decimal=decimal//16
    return hex[-1:0:-1]+hex[0]
def BtoD(binary):
    dec=0
    for i in range(0,len(binary)):
        dec=dec+int(binary[-(i+1)])*(2**(i))
    return dec

def Btype(type_of_instruction,line_to_execute):
    if (type_of_instruction=='B'):
        rs1=2
        rs2=2
        immediate=line_to_execute[0]+line_to_execute[24]+line_to_execute[1:7]
    return

def Stype(type_of_instruction,line_to_execute):
    if (type_of_instruction=='S'):
        immediate=line_to_execute[0:7]+line_to_execute[20:25]
        ra=line_to_execute[7:12] #r1
        sp=line_to_execute[12:17] #r2
        funct3=line_to_execute[17:20]
        mem='0x000100'+DtoH(registers[ra]+BtoD(immediate))
        memory[mem]=registers[sp]
        return

    

